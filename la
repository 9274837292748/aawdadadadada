local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

loadstring(game:HttpGet("https://raw.githubusercontent.com/AstraOutlight/my-scripts/refs/heads/main/namertag"))()
loadstring(game:HttpGet("https://raw.githubusercontent.com/9274837292748/aawdadadadada/refs/heads/main/asasasaas"))()
TextChatService.TextChannels.RBXGeneral:SendAsync("base64 translator by Astric")

local screenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
screenGui.Name = "Base64ChatGui"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 400, 0, 300)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainFrame.BackgroundTransparency = 0.1
mainFrame.Parent = screenGui

local corner = Instance.new("UICorner", mainFrame)
corner.CornerRadius = UDim.new(0, 12)

mainFrame.Active = true
mainFrame.Draggable = true

local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.Text = "X"
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextSize = 18
closeButton.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.BorderSizePixel = 0
closeButton.Parent = mainFrame

Instance.new("UICorner", closeButton).CornerRadius = UDim.new(0, 8)

closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, -20, 0.6, -10)
scrollFrame.Position = UDim2.new(0, 10, 0, 10)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollFrame.ScrollBarThickness = 6
scrollFrame.BackgroundTransparency = 1
scrollFrame.Parent = mainFrame

local layout = Instance.new("UIListLayout", scrollFrame)
layout.Padding = UDim.new(0, 4)
layout.SortOrder = Enum.SortOrder.LayoutOrder

local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(1, -20, 0, 40)
textBox.Position = UDim2.new(0, 10, 0.62, 0)
textBox.PlaceholderText = "Type message to encode"
textBox.Font = Enum.Font.SourceSans
textBox.TextSize = 18
textBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
textBox.TextColor3 = Color3.new(1, 1, 1)
textBox.BorderSizePixel = 0
textBox.Parent = mainFrame

Instance.new("UICorner", textBox).CornerRadius = UDim.new(0, 8)

local sendButton = Instance.new("TextButton")
sendButton.Size = UDim2.new(1, -20, 0, 40)
sendButton.Position = UDim2.new(0, 10, 0.78, 0)
sendButton.Text = "Send (Base64)"
sendButton.Font = Enum.Font.SourceSansBold
sendButton.TextSize = 18
sendButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
sendButton.TextColor3 = Color3.new(1, 1, 1)
sendButton.BorderSizePixel = 0
sendButton.Parent = mainFrame

Instance.new("UICorner", sendButton).CornerRadius = UDim.new(0, 8)

local lastDecoded = ""

local base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local function base64encode(data)
    local result = ''
    local bytes = {data:byte(1, #data)}
    for i = 1, #bytes, 3 do
        local a, b_, c = bytes[i], bytes[i + 1] or 0, bytes[i + 2] or 0
        local n = a * 65536 + b_ * 256 + c

        local n1 = math.floor(n / 262144) % 64 + 1
        local n2 = math.floor(n / 4096) % 64 + 1
        local n3 = math.floor(n / 64) % 64 + 1
        local n4 = n % 64 + 1

        result = result
            .. base64chars:sub(n1, n1)
            .. base64chars:sub(n2, n2)
            .. ((i + 1 <= #bytes) and base64chars:sub(n3, n3) or '=')
            .. ((i + 2 <= #bytes) and base64chars:sub(n4, n4) or '=')
    end
    return result
end

local function base64decode(data)
    data = data:gsub("[^" .. base64chars .. "=]", "")
    local output = {}
    local bitBuffer = 0
    local bitCount = 0

    for i = 1, #data do
        local char = data:sub(i, i)
        if char ~= "=" then
            local val = base64chars:find(char) - 1
            bitBuffer = bit32.lshift(bitBuffer, 6)
            bitBuffer = bit32.bor(bitBuffer, val)
            bitCount = bitCount + 6

            while bitCount >= 8 do
                bitCount = bitCount - 8
                local byte = bit32.rshift(bitBuffer, bitCount) % 256
                table.insert(output, string.char(byte))
            end
        end
    end

    return table.concat(output)
end

local sentMessages = {}

sendButton.MouseButton1Click:Connect(function()
    local message = textBox.Text
    if message and message ~= "" then
        local encoded = base64encode(message) .. "•"
        local generalChannel = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")
        generalChannel:SendAsync(encoded)
        textBox.Text = ""
        sendButton.Text = "Sent!"
        sentMessages[encoded] = true
        task.delay(1, function()
            sendButton.Text = "Send (Base64)"
        end)
    end
end)

local function displayDecodedMessage(from, message)
    lastDecoded = message
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 0, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(0, 255, 0)
    label.Font = Enum.Font.SourceSans
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextWrapped = true
    label.AutomaticSize = Enum.AutomaticSize.Y
    label.Text = string.format("[Decoded from %s]: %s", from, message)
    label.Parent = scrollFrame

    task.defer(function()
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
        scrollFrame.CanvasPosition = Vector2.new(0, layout.AbsoluteContentSize.Y)
    end)
end

local generalChannel = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")

generalChannel.OnIncomingMessage = function(message)
    if not message.TextSource or not message.Text or type(message.Text) ~= "string" then
        return
    end

    local text = message.Text

    if text:sub(-3) == "•" then
        if sentMessages[text] then
            sentMessages[text] = nil
            return
        end

        local clean = text:sub(1, -4)
        local success, decoded = pcall(base64decode, clean)
        if success and decoded and decoded:match("[%w%p%s]") then
            local fromName = message.TextSource.Name or "Unknown"
            displayDecodedMessage(fromName, decoded)
        end
    end
end

